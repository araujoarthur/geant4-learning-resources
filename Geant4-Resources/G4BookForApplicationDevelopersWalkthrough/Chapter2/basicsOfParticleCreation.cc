// Constructing Particles
/*
    ConstructParticle() is a pure virtual method in which the static member functions for all the particles you require
    should be called.
    [Warning: You must define "ALL PARTICLE TYPES" which are used in your application, except for heavy ions.
        "ALL PARTICLE TYPES" means not only primary particles, but also all other particles which may appear as
        secondaries generated by physics processes you use. Beginning with GEANT4 version 8.0, you should keep this
        rule strictly because all particle definitions are revised to "non-static" objects.]
*/

// Example construction a proton and a geantion

void MyPhysicsList::ConstructParticle()
{
    G4Proton::ProtonDefinition();
    G4Geantino::GeantinoDefinition();
}

/*
    There are lots of particles in geant4, so if you want all of them, you don't need to list one-by-one.
    You can use the six utility classes to perform this action:
        G4BosonConstructor
        G4LeptonConstructor
        G4MesonConstructor
        G4IonConstructor
        G4ShortlivedConstructor

    A snippet of Example 05 is given below:
*/

void ExN05PhysicsList::ConstructLeptons()
{
    // Construct all leptons
    G4LeptonConstructor pConstructor;
    pConstructor.ConstructParticle();
}

// SPECIFYING PHYSICS PROCESSES

/*
    Physics Processes describe how particles interact with materials.
    In Geant4 there are 7 major categories of processes:
        electromagnetic
        hadronic
        transportation
        decay
        optical
        photonlepton_hadron
        parametrisation
    
    All physics processes are derived from the G4VProcess base class. Its virtual methods
        AtRestDoIt
        AlongStepDoIt
        PostStepDoIt
    and the corresponding methods
        AtRestGetPhysicalInteractionLength
        AlongStepGetPhysicalInteractionLength
        PostStepGetPhysicalInteractionLength
    describe the behavior of a physics process when they are implemented in a derived class.
    
    The following are specialized classes to be used for simple processes:
    G4VAtRestProcess (Processes with only AtRestDoIt)
    G4VContinuousProcess (Processes with only AlongStepDoIt)
    G4DiscreteProcess (Processes with only PostStepDoIt)

    Another 4 virtual classes, such as G4VContinuousDiscreteProcess, are provided for complex processes.
*/

// Managing Processes
/*
    The G4ProcessManager class contains a list of processes that a particle can undertake. It has information
    on the order of invocation of the processes as well as which kind of DoIt method is valid for each process in the list.
    A G4ProcessManager object corresponds to EACH PARTICLE and is ATTACHED TO the G4ParticleDefinition class.

    In order to validate processes, they should be registered with the particles G4ProcessManager. Process ordering
    information is included by using the AddProcess() and SetProcessOrdering() methods. For registration of
    simple processes, the AddAtRestProcess(), AddContinuousProcess() and AddDiscreteProcess()
    methods may be used.
    
    G4ProcessManager is able to turn some processes on or off during a run by using the ActivateProcess()
    and InActivateProcess() methods. These methods are valid only after process registration is complete, so they
    must not be used in the PreInit phase.
    The G4VUserPhysicsList class creates and attaches G4ProcessManager objects to all particle classes defined
    in the ConstructParticle() method
*/

// Specifying Physics Processes
/*
    G4VUserPhysicsList is the base for a mandatory user class in which all physics processes and all particles required
    in simulation must be registered. The user must create a class derived from G4VUserPhysicsList and implement the pure virtual method ConstructProcess().

    For example if just the G4Geantino (debug particle that doesn't interact) particle is required, only the transportation process need to be
    registered. The Construct process would then be implemented as follows:
*/

void MyPhysicsList::ConstructProcess()
{
    // Define transportation process.
    AddTransportation();
}

/*
    Here, the AddTransportation() method is provided in the G4VUserPhysicsList class to register the G4Transportation class with all particle classes.
    The G4Transportation class (and/or related classes) describes the particle motion in space and time. [It's the mandatory process for tracking particles].
*/